// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(RecipesDbContext))]
    [Migration("20230926102111_DataSeeding")]
    partial class DataSeeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MeasureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            MeasureUnit = "<geen>",
                            Name = "Melk",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            MeasureUnit = "<geen>",
                            Name = "Water",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            MeasureUnit = "<geen>",
                            Name = "Knoflook",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            MeasureUnit = "<geen>",
                            Name = "Champignons",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            MeasureUnit = "<geen>",
                            Name = "Tomaten",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            MeasureUnit = "<geen>",
                            Name = "Gehakt",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            MeasureUnit = "<geen>",
                            Name = "Ajuin",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            MeasureUnit = "<geen>",
                            Name = "Spaghettikruiden",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            MeasureUnit = "<geen>",
                            Name = "Peper",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            MeasureUnit = "<geen>",
                            Name = "Zout",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            MeasureUnit = "<geen>",
                            Name = "Sambal Oelek",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            MeasureUnit = "<geen>",
                            Name = "Azijn",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            MeasureUnit = "<geen>",
                            Name = "Courgette",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            MeasureUnit = "<geen>",
                            Name = "Wortelen",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            MeasureUnit = "<geen>",
                            Name = "Rode paprika",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            MeasureUnit = "<geen>",
                            Name = "Spaghetti",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            MeasureUnit = "<geen>",
                            Name = "Boter",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            MeasureUnit = "<geen>",
                            Name = "Olijfolie",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            MeasureUnit = "<geen>",
                            Name = "Sojasaus",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            MeasureUnit = "<geen>",
                            Name = "Aardappelen",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000021"),
                            MeasureUnit = "<geen>",
                            Name = "Worst(en)",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000022"),
                            MeasureUnit = "<geen>",
                            Name = "Appelmoes",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000023"),
                            MeasureUnit = "<geen>",
                            Name = "Nootmuskaat",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000024"),
                            MeasureUnit = "<geen>",
                            Name = "Kaas",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000025"),
                            MeasureUnit = "<geen>",
                            Name = "Ham",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000026"),
                            MeasureUnit = "<geen>",
                            Name = "Ei(eren)",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000027"),
                            MeasureUnit = "<geen>",
                            Name = "Kipfilet",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000028"),
                            MeasureUnit = "<geen>",
                            Name = "Suiker",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000029"),
                            MeasureUnit = "<geen>",
                            Name = "Komkommer",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000030"),
                            MeasureUnit = "<geen>",
                            Name = "Citroen",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000031"),
                            MeasureUnit = "<geen>",
                            Name = "Bonen",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000032"),
                            MeasureUnit = "<geen>",
                            Name = "Brochetten, gemarineerd",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000033"),
                            MeasureUnit = "<geen>",
                            Name = "Rijst",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000034"),
                            MeasureUnit = "<geen>",
                            Name = "Kipfilet",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000035"),
                            MeasureUnit = "<geen>",
                            Name = "Basilicum",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000036"),
                            MeasureUnit = "<geen>",
                            Name = "Tomatensaus",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000037"),
                            MeasureUnit = "<geen>",
                            Name = "Gemalen kaas",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000038"),
                            MeasureUnit = "<geen>",
                            Name = "Gebakken kip",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000039"),
                            MeasureUnit = "<geen>",
                            Name = "Couscous",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000040"),
                            MeasureUnit = "<geen>",
                            Name = "Ananassschijfjes",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000041"),
                            MeasureUnit = "<geen>",
                            Name = "Kabeljauw",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000042"),
                            MeasureUnit = "<geen>",
                            Name = "Paneermeel",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000043"),
                            MeasureUnit = "<geen>",
                            Name = "Kalfslap",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000044"),
                            MeasureUnit = "<geen>",
                            Name = "Broodkruimels",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000045"),
                            MeasureUnit = "<geen>",
                            Name = "Sojasaus",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000046"),
                            MeasureUnit = "<geen>",
                            Name = "Ham",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000047"),
                            MeasureUnit = "<geen>",
                            Name = "Bloem",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000048"),
                            MeasureUnit = "<geen>",
                            Name = "Kipfilet",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000049"),
                            MeasureUnit = "<geen>",
                            Name = "Citroensap",
                            Quantity = 0.0
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000050"),
                            MeasureUnit = "<geen>",
                            Name = "Gemengde kruiden",
                            Quantity = 0.0
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Description = "Doe boter in een pan, bak de worst goed. Schil patatten en kook ze in water. Serveren met appelmoes.",
                            Title = "Worst met appelmoes en patatten",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Description = "Snij de groenten in stukken, zo klein naar wens. Doe boter en ajuin in de pot, gooi de gesneden groenten achteraf in. Voeg tomatensaus en de kruiden toe. Bak gehakt in een pan en hak het in kleine stukken. Bak de spaghetti in een pot kokend water. Serveer met gemalen kaas.",
                            Title = "Spaghetti bolognaise",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Description = "Doe rijst in kokend water voor ongeveer 8 minuten. Plaats de gemarineerde brochetten in een ovenschaal met boter en zet het in de combioven op 180 graden voor 7 minuten en 30 seconden. Serveer met geraspte wortelen.",
                            Title = "Brochetten met rijst en wortelen",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Description = "Typisch opwarm maaltijd. Zet de gebakken kip van de slager in de microgolfoven voor 5 minuten. Open het blik ananasschijfjes en leg een gewenste hoeveelheid op je bord. Gooi wat couscous in een schaaltje met water en warm op in microgolfoven voor 1 minuut. Smakelijk!",
                            Title = "Gebakken kip met ananasschijfjes en couscous.",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Description = "Warm boter op in de pan en leg de kabeljauw erin. Doe patatten in kokend water tot ze zacht zijn. Stamp ze tot een moes en mix er melk en nootmuskaat in. Snij champignons in stukken en bak ze in de pan. Breng op smaak met zout en peper.",
                            Title = "Puree met vis en gebakken champignons.",
                            UserId = "00000000-0000-0000-0000-000000000006"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Description = "Kook de patatten. Doe boter in een pot, voeg ajuin en bonen aan toe. Zet het op een zacht vuurtje voor 20 minuten. Mix de gehakt met ajuin in een kom. Giet het vervolgens uit in een ovenschaal en vorm er een brood mee. Strooi paneermeel over het gehaktbrood en voeg er boter aan toe. Bak het vervolgens in de combioven voor 20 minuten aan 200 graden.",
                            Title = "Gehaktbrood met patatten en bonen",
                            UserId = "00000000-0000-0000-0000-000000000007"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Description = "Doop de kalfslap in een kom geklopte ei, daarna in broodkruimels. Bak het in de frituurpan tot het een mooie donkere kleur heeft. Kook ondertussen rijst. Doe de rijst in een kommetje, besprenkel met wat zout en peper. Doe 2 eieren in een pan en kluts het zachtjes voor wat textuur tot het zacht gebakken is. Leg de roerei over de rijst. Haal de kalfslap uit het frituurvet en snij het in gelijke stukken en plaats ze op het roerei. Kap er wat sojasaus over.",
                            Title = "Vleeskommetje",
                            UserId = "00000000-0000-0000-0000-000000000008"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Description = "Bak de ham, bak de eieren. Drink sinaasappelsap erbij voor max energie.",
                            Title = "Eggs 'n bacon",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Description = "Maak een roux van de boter en de bloem. Dit doe je door de boter in een steelpannetje te smelten. Doe de bloem bij de boter en roer met de garde. Laat het mengsel een beetje opdrogen in het pannetje, tot je de geur van koekjes ruikt. Giet er beetje bij beetje de koude melk bij en roer telkens het mengsel glad. Breng al roerend aan de kook, op matig vuur. Laat de witte saus indikken en laat nog enkele minuten doorkoken zodat de bloemsmaak verdwijnt. Breng op smaak met nootmuskaat, peper en zout.",
                            Title = "Witte saus",
                            UserId = "00000000-0000-0000-0000-000000000009"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Description = "Een eenvoudig, smaakvol gerecht met sappige gegrilde kipfilets gemarineerd in citroensap, knoflook en kruiden.",
                            Title = "Gegrilde Kipfilet met Citroen en Kruiden",
                            UserId = "00000000-0000-0000-0000-000000000010"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd1791a4-de29-4cb6-a1c9-76a240a2f5e5",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEAItGMp8D722VqakNMRzJlD1R3w4/DJFTSk3Vtx0CLzgRjBUBw0ByDXuIaTAmZ5cpQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "097d486b-9b22-4ef9-9158-b7b359e213eb",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "be024afa-cbec-422c-8c56-b85de938aa7b",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGXbYefMWVfl7p4hk9u2tWRsWaWAGI7bMDnRBVuHC1tQivjCvCHHAwxC2Yfwd4o4zA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8fe28202-9376-4e83-84b2-1842c7e8dacc",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a73cbed5-370d-4089-9132-887f6f3008a8",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEALZqjqn5Q+Z7q9OFQ/6QERJUGC8abmJalBh8fe3imU5aWVu+UOIhYa0oVKTPLKbYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42f2f883-48a8-45b0-acbd-1e76e24bad86",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ae9c9acb-8e1c-48c0-aedd-037923cd609d",
                            Email = "woutercallewaert@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "WOUTERCALLEWAERT@GMAIL.COM",
                            NormalizedUserName = "YUSIFER",
                            PasswordHash = "AQAAAAEAACcQAAAAEG+s6B8xyR7RxqU7/UgYWrYErzbsZsDiVQc3AS30C2piof2qRPb+l/8efPbT2i0wqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f0baa5f-2f8b-4508-8c52-2eb40d192b6f",
                            TwoFactorEnabled = false,
                            UserName = "Yusifer"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fbd10e80-9c43-45eb-a08b-c0d0bbca78cf",
                            Email = "alice@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE@EXAMPLE.COM",
                            NormalizedUserName = "ALICE",
                            PasswordHash = "AQAAAAEAACcQAAAAEEEoWElsyJUsTrQ4nkfVXM4wxZza0paG2pvcPDFuWMKERh0BbIuwnv+hlCoKgYGlzg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14e7962c-8d2f-41d0-877a-46dcf80cff87",
                            TwoFactorEnabled = false,
                            UserName = "Alice"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000006",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8263387b-3fe0-46a5-856c-6f2412b27a59",
                            Email = "bob@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@EXAMPLE.COM",
                            NormalizedUserName = "BOB",
                            PasswordHash = "AQAAAAEAACcQAAAAEGTO3CQTqNMFUcKKyOobRLleaNr0GAt/CjKyRl9xiqS5jeIT7Lj22j0qo3H25mSSsg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df102975-1f02-4ded-a50b-786fedb07e2f",
                            TwoFactorEnabled = false,
                            UserName = "Bob"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000007",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17fe93aa-dd5f-4e1f-a8fe-8c204b45ace0",
                            Email = "charlie@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLIE@EXAMPLE.COM",
                            NormalizedUserName = "CHARLIE",
                            PasswordHash = "AQAAAAEAACcQAAAAENxubj/lXArVsxfamZuHgLeGTOkn/D2CPvqIgWMzrNZCcgAXwxVQuIU7LMO+beurag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6993e4b4-9786-4406-810b-c9bd2e94cd0c",
                            TwoFactorEnabled = false,
                            UserName = "Charlie"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000008",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62e84d10-6f6d-4d1e-9d5f-dbd702570577",
                            Email = "david@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID@EXAMPLE.COM",
                            NormalizedUserName = "DAVID",
                            PasswordHash = "AQAAAAEAACcQAAAAEIA9UCIXJWdcPztOgOhUnUQAsJiQoD2a7zD91D3aA/cO6/SoDmIdz5k0CUODKnvlwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b6e0c1b-58cd-4d4c-b0ff-4645c2ae67f5",
                            TwoFactorEnabled = false,
                            UserName = "David"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5011202a-b3e4-489a-86a9-2bbefbef3376",
                            Email = "eva@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EVA@EXAMPLE.COM",
                            NormalizedUserName = "EVA",
                            PasswordHash = "AQAAAAEAACcQAAAAEH79zOhmcmDxA0F/dSp8Gl86izJhBH9FfgK/uh7jeG7pAAFYtgzJWfLqflf2w6sGaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1cdb5813-e0fd-487b-b4b0-a5e40c03b493",
                            TwoFactorEnabled = false,
                            UserName = "Eva"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000010",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fb940d97-ec0f-4e61-8bd4-51f113851289",
                            Email = "fiona@example.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "FIONA@EXAMPLE.COM",
                            NormalizedUserName = "FIONA",
                            PasswordHash = "AQAAAAEAACcQAAAAELs4mIEI27mtF4EGXsY+8dxuaRCdzaygrlLZcKD4Za9n6loOKvWivifK126Qhpunhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f451ba09-571c-49e3-89d3-65ca0724bc74",
                            TwoFactorEnabled = false,
                            UserName = "Fiona"
                        });
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IngredientsId", "RecipesId");

                    b.HasIndex("RecipesId");

                    b.ToTable("IngredientRecipe");

                    b.HasData(
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000021"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000022"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000020"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000013"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000014"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000015"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000016"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000011"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000007"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000008"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000036"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000037"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000032"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000033"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000038"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000039"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000040"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000041"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000023"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000020"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000004"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000042"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000031"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000020"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000006"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000043"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000026"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000044"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000033"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000045"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000046"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000026"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000017"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000047"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000001"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000009"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000010"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000023"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000048"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000049"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000003"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000018"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        },
                        new
                        {
                            IngredientsId = new Guid("00000000-0000-0000-0000-000000000050"),
                            RecipesId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            ConcurrencyStamp = "fe2f3206-c3b3-41fd-902b-888f1edf2c93",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            ConcurrencyStamp = "b854951c-2780-4697-a074-b7ad641f5991",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000001",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000002",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000003",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000004",
                            RoleId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000005",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000006",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000007",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000008",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000009",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            UserId = "00000000-0000-0000-0000-000000000010",
                            RoleId = "00000000-0000-0000-0000-000000000002"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Recipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IngredientRecipe", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.User", b =>
                {
                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
